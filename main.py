import telebot
import os
import re
import csv
import json
from datetime import datetime

# === CONFIG ===
TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_ID = 8050560759
bot = telebot.TeleBot(TOKEN)

CSV_FILE = "applications.csv"
CSV_ALL_FILE = "historyanket.csv"
VACANCY_FILE = "vacancies.json"

user_state = {}
user_data = {}


# === –í–ê–ö–ê–ù–°–ò–ò ===
def load_vacancies():
    if os.path.exists(VACANCY_FILE):
        try:
            with open(VACANCY_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {VACANCY_FILE}: {e}")
    return {
        "üßë‚Äç‚úàÔ∏è –ü–∏–ª–æ—Ç": True,
        "üéß –î–∏—Å–ø–µ—Ç—á–µ—Ä": True,
        "‚úàÔ∏è –°—Ç—é–∞—Ä–¥": True,
        "üõ† –ù–∞–∑–µ–º–Ω–∞—è —Å–ª—É–∂–±–∞": True
    }


def save_vacancies():
    with open(VACANCY_FILE, "w", encoding="utf-8") as f:
        json.dump(vacancy_status, f, ensure_ascii=False, indent=2)


vacancy_status = load_vacancies()


# === –ú–ï–ù–Æ ===
def show_main_menu(chat_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("‚úàÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")
    btn2 = telebot.types.KeyboardButton("üë®‚Äç‚úàÔ∏è –ù–∞–±–æ—Ä –≤ –∫–æ–º–∞–Ω–¥—É")
    btn3 = telebot.types.KeyboardButton("üóÇ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã")
    markup.add(btn1, btn2)
    markup.add(btn3)
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç –ê—ç—Ä–æ—Ñ–ª–æ—Ç! –î–ª—è —á–µ–≥–æ —Ç—ã —Å—é–¥–∞ –ø—Ä–∏—à—ë–ª?", reply_markup=markup)
    user_state[chat_id] = None
    user_data[chat_id] = {}


# === START ===
@bot.message_handler(commands=['start'])
def start(message):
    show_main_menu(message.chat.id)


# === –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ê–ù–ö–ï–¢–´ ===
def get_user_status(user_id):
    if not os.path.exists(CSV_ALL_FILE):
        return None
    with open(CSV_ALL_FILE, "r", encoding="utf-8") as f:
        reader = csv.reader(f)
        next(reader, None)
        for row in reader:
            if len(row) >= 14 and str(row[2]) == str(user_id):
                return row[13]
    return None


@bot.message_handler(func=lambda msg: msg.text == "üóÇ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã")
def check_status(message):
    status = get_user_status(message.chat.id)
    if not status:
        bot.send_message(message.chat.id, "üïµÔ∏è –ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.")
    elif "–ü—Ä–∏–Ω—è—Ç–∞" in status:
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ *–ø—Ä–∏–Ω—è—Ç–∞!*", parse_mode="Markdown")
    elif "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞" in status:
        bot.send_message(message.chat.id, "‚ùå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ *–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!*", parse_mode="Markdown")
    elif "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ" in status:
        bot.send_message(message.chat.id, f"üìÖ –í–∞—à–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: *{status.split(': ')[1]}*", parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "‚öôÔ∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ *–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏*.", parse_mode="Markdown")


# === –°–û–•–†–ê–ù–ï–ù–ò–ï –ê–ù–ö–ï–¢ ===
def save_to_csv(message):
    data = user_data.get(message.chat.id, {})
    now = datetime.now().strftime("%d.%m.%Y %H:%M")

    # –∞–∫—Ç–∏–≤–Ω—ã–µ
    file_exists = os.path.isfile(CSV_FILE)
    with open(CSV_FILE, "a", newline='', encoding="utf-8") as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow([
                "–¢–∏–ø", "–ò–º—è", "ID", "Username", "–í–æ–∑—Ä–∞—Å—Ç", "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è", "–í–∞–∫–∞–Ω—Å–∏—è", "–°—Ç—Ä–∞–Ω–∞", "GMT",
                "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª", "TikTok", "–¢–µ–ª–µ—Ñ–æ–Ω", "–°—Ç–∞—Ç—É—Å"
            ])
        writer.writerow([
            data.get("type", "‚Äî"),
            message.from_user.first_name,
            message.chat.id,
            f"@{message.from_user.username}" if message.from_user.username else "‚Äî",
            data.get("age", "‚Äî"),
            data.get("airline", "‚Äî"),
            data.get("vacancy", "‚Äî"),
            data.get("country", "‚Äî"),
            data.get("gmt", "‚Äî"),
            data.get("followers", "‚Äî"),
            data.get("telegram_channel", "‚Äî"),
            data.get("tiktok", "‚Äî"),
            data.get("phone", "‚Äî"),
            "–û–∂–∏–¥–∞–µ—Ç"
        ])

    # –∏—Å—Ç–æ—Ä–∏—è
    file_all_exists = os.path.isfile(CSV_ALL_FILE)
    with open(CSV_ALL_FILE, "a", newline='', encoding="utf-8") as f_all:
        writer_all = csv.writer(f_all)
        if not file_all_exists:
            writer_all.writerow([
                "–¢–∏–ø", "–ò–º—è", "ID", "Username", "–í–æ–∑—Ä–∞—Å—Ç", "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è", "–í–∞–∫–∞–Ω—Å–∏—è", "–°—Ç—Ä–∞–Ω–∞", "GMT",
                "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª", "TikTok", "–¢–µ–ª–µ—Ñ–æ–Ω", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
            ])
        writer_all.writerow([
            data.get("type", "‚Äî"),
            message.from_user.first_name,
            message.chat.id,
            f"@{message.from_user.username}" if message.from_user.username else "‚Äî",
            data.get("age", "‚Äî"),
            data.get("airline", "‚Äî"),
            data.get("vacancy", "‚Äî"),
            data.get("country", "‚Äî"),
            data.get("gmt", "‚Äî"),
            data.get("followers", "‚Äî"),
            data.get("telegram_channel", "‚Äî"),
            data.get("tiktok", "‚Äî"),
            data.get("phone", "‚Äî"),
            "–û–∂–∏–¥–∞–µ—Ç",
            now
        ])


# === –û–¢–ü–†–ê–í–ö–ê –ê–ù–ö–ï–¢–´ –ê–î–ú–ò–ù–£ ===
def send_to_admin(message):
    data = user_data.get(message.chat.id, {})
    text = (
        f"üìù –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ ({data.get('type', '‚Äî')})\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name}\n"
        f"üÜî ID: {message.chat.id}\n"
        f"üîó Username: @{message.from_user.username if message.from_user.username else '‚Äî'}\n"
        f"üìã –í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '‚Äî')}\n"
        f"‚úàÔ∏è –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {data.get('airline', '‚Äî')}\n"
        f"üìç –°—Ç—Ä–∞–Ω–∞: {data.get('country', '‚Äî')}\n"
        f"üïí GMT: {data.get('gmt', '‚Äî')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '‚Äî')}\n"
        f"üíº –í–∞–∫–∞–Ω—Å–∏—è: {data.get('vacancy', '‚Äî')}\n"
    )
    bot.send_message(ADMIN_ID, text)


# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–í ===
def update_status(user_id, status):
    for file_path in [CSV_FILE, CSV_ALL_FILE]:
        if not os.path.exists(file_path):
            continue
        rows = []
        with open(file_path, "r", encoding="utf-8") as f:
            reader = csv.reader(f)
            headers = next(reader, None)
            for row in reader:
                if len(row) > 2 and str(row[2]) == str(user_id):
                    if len(row) >= 14:
                        row[13] = status
                    else:
                        row.append(status)
                rows.append(row)
        with open(file_path, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            if headers:
                writer.writerow(headers)
            writer.writerows(rows)
    if status.startswith("–ü—Ä–∏–Ω—è—Ç–∞") or status.startswith("–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"):
        remove_from_active(user_id)


def remove_from_active(user_id):
    if not os.path.exists(CSV_FILE):
        return
    rows = []
    with open(CSV_FILE, "r", encoding="utf-8") as f:
        reader = csv.reader(f)
        headers = next(reader, None)
        for row in reader:
            if len(row) > 2 and str(row[2]) != str(user_id):
                rows.append(row)
    with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
        writer = csv.writer(f)
        if headers:
            writer.writerow(headers)
        writer.writerows(rows)


# === BACK BUTTON ===
def back_button():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return markup


# === –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê ===
# /accept, /decline, /msg, /interview, /getcsv, /gethistory, /clearcsv, /vacno, /vacancies, /closevacancy, /openvacancy, /resetvacancies
# (–≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å ‚Äî –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞–ª–æ—Å—å)
# ===== –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ =====

# --- –ü—Ä–∏–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É ---
@bot.message_handler(commands=['accept'])
def accept_user(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    parts = message.text.split()
    if len(parts) < 2:
        return bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /accept <user_id>")
    try:
        user_id = int(parts[1])
        bot.send_message(user_id, "‚úÖ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ ‚úàÔ∏è")
        update_status(user_id, "–ü—Ä–∏–Ω—è—Ç–∞")
        bot.reply_to(message, f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


# --- –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É ---
@bot.message_handler(commands=['decline'])
def decline_user(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    parts = message.text.split()
    if len(parts) < 2:
        return bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /decline <user_id>")
    try:
        user_id = int(parts[1])
        text = ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞! ‚ùå\n\n"
                "–ï—Å–ª–∏ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n"
                "@Aeroflotprojectflight_support")
        bot.send_message(user_id, text)
        update_status(user_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        bot.reply_to(message, f"üö´ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


# --- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ---
@bot.message_handler(commands=['msg'])
def admin_msg(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /msg <user_id> <—Ç–µ–∫—Å—Ç>")
    try:
        user_id = int(parts[1])
        text_to_send = parts[2]
        bot.send_message(user_id, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{text_to_send}")
        bot.reply_to(message, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


# --- –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ ---
@bot.message_handler(commands=['interview'])
def interview_user(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    parts = message.text.split()
    if len(parts) < 3:
        return bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /interview <user_id> <–¥–∞—Ç–∞>")
    try:
        user_id = int(parts[1])
        date = parts[2]
        bot.send_message(user_id,
                         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ ‚úÖ\n\n"
                         f"–í–∞—à–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ **{date}**.\n\n"
                         "–ï—Å–ª–∏ –≤–∞–º –Ω–µ—É–¥–æ–±–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ: ¬´–Ø —Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –î–î.–ú–ú¬ª.",
                         parse_mode="Markdown")
        update_status(user_id, f"–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ: {date}")
        bot.reply_to(message, f"üìÖ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ {date}.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


# --- –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ---
@bot.message_handler(commands=['vacno'])
def vacancy_unavailable(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    parts = message.text.split()
    if len(parts) < 2:
        return bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /vacno <user_id>")
    try:
        user_id = int(parts[1])
        old_vacancy = user_data.get(user_id, {}).get("vacancy")
        bot.send_message(user_id, "‚ùå –î–∞–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∑–∞–Ω—è—Ç–∞. –ü—Ä–æ—Å–∏–º –≤–∞—Å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é.")
        # –ú–µ–Ω—é –±–µ–∑ —Å—Ç–∞—Ä–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancies = ["üßë‚Äç‚úàÔ∏è –ü–∏–ª–æ—Ç", "üéß –î–∏—Å–ø–µ—Ç—á–µ—Ä", "‚úàÔ∏è –°—Ç—é–∞—Ä–¥", "üõ† –ù–∞–∑–µ–º–Ω–∞—è —Å–ª—É–∂–±–∞"]
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        for v in vacancies:
            if v != old_vacancy:
                markup.add(telebot.types.KeyboardButton(v))
        markup.add(telebot.types.KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–∫–∞–Ω—Å–∏—é:", reply_markup=markup)
        if user_id in user_data:
            user_data[user_id]["vacancy"] = None
        user_state[user_id] = "team_country"
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –∫ –≤—ã–±–æ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–∏.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


# --- –°–∫–∞—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã ---
@bot.message_handler(commands=['getcsv'])
def get_csv(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    if os.path.exists(CSV_FILE):
        with open(CSV_FILE, "rb") as f:
            bot.send_document(ADMIN_ID, f, caption="üìÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã")
        os.remove(CSV_FILE)
        bot.send_message(ADMIN_ID, "‚úÖ –§–∞–π–ª applications.csv –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    else:
        bot.reply_to(message, "‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")


# --- –°–∫–∞—á–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∫–µ—Ç ---
@bot.message_handler(commands=['gethistory'])
def get_history(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    if os.path.exists(CSV_ALL_FILE):
        with open(CSV_ALL_FILE, "rb") as f:
            bot.send_document(ADMIN_ID, f, caption="üìú –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∞–Ω–∫–µ—Ç (historyanket.csv)")
    else:
        bot.reply_to(message, "‚ùå –ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")


# --- –û—á–∏—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã ---
@bot.message_handler(commands=['clearcsv'])
def clear_csv(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    if not os.path.exists(CSV_FILE):
        return bot.reply_to(message, "–§–∞–π–ª —É–∂–µ –ø—É—Å—Ç.")
    with open(CSV_FILE, "r", encoding="utf-8") as f:
        reader = csv.reader(f)
        headers = next(reader, None)
    with open(CSV_FILE, "w", newline='', encoding="utf-8") as f:
        writer = csv.writer(f)
        if headers:
            writer.writerow(headers)
    bot.send_message(ADMIN_ID, "üßπ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –æ—á–∏—â–µ–Ω—ã. –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ ---
@bot.message_handler(commands=['vacancies'])
def list_vacancies(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    text = "üìã *–¢–µ–∫—É—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:*\n\n"
    for vac, avail in vacancy_status.items():
        text += f"{vac} ‚Äî {'‚úÖ –û—Ç–∫—Ä—ã—Ç–∞' if avail else 'üö´ –ó–∞–∫—Ä—ã—Ç–∞'}\n"
    bot.send_message(ADMIN_ID, text, parse_mode="Markdown")


@bot.message_handler(commands=['closevacancy'])
def close_vacancy(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /closevacancy <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
    name = parts[1].strip()
    for vac in vacancy_status:
        if name.lower() in vac.lower():
            vacancy_status[vac] = False
            save_vacancies()
            return list_vacancies(message)
    bot.reply_to(message, "‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@bot.message_handler(commands=['openvacancy'])
def open_vacancy(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /openvacancy <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
    name = parts[1].strip()
    for vac in vacancy_status:
        if name.lower() in vac.lower():
            vacancy_status[vac] = True
            save_vacancies()
            return list_vacancies(message)
    bot.reply_to(message, "‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@bot.message_handler(commands=['resetvacancies'])
def reset_vacancies(message):
    if message.from_user.id != ADMIN_ID:
        return bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
    for vac in vacancy_status:
        vacancy_status[vac] = True
    save_vacancies()
    bot.send_message(ADMIN_ID, "üîÑ –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã.")
    list_vacancies(message)


# === –ó–ê–ü–£–°–ö ===
bot.polling(non_stop=True)
